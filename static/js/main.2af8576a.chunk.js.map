{"version":3,"sources":["myComponents/allTagLists.js","myComponents/headerTagGroup.js","myComponents/header.js","myComponents/spacer.js","myComponents/tagGroup.js","myComponents/skinName.js","myComponents/lore.js","myComponents/championModal.js","myComponents/difficultyScore.js","myComponents/championCard.js","myComponents/cardsArea.js","App.js","serviceWorker.js","index.js"],"names":["AllTagLists","props","name","allTanks","allFighters","allAssassins","allMarksman","allMage","allSupport","generalChampionsInfo","data","tags","tag","push","initialState","all","tank","fighter","assassin","marksman","mage","support","HeaderTagGroup","useState","badgeState","setBadgeState","useEffect","searchInput","newState","Object","assign","handleClick","useCallback","event","setSearchInput","setChampionListToShow","championNameList","Badge","onClick","variant","className","Header","keys","championRealNames","map","champion","championFakeNames","id","searchInputList","includes","toLowerCase","toUpperCase","searchInputListFakeNames","fakeName","Form","Group","controlId","Control","autoComplete","onChange","e","target","value","type","placeholder","Spacer","TagGroup","championTagBadges","key","SkinName","defaultSkinName","skin","Lore","defaultSkinLore","lore","ChampionModal","individualChampionInfo","setIndividualChampionInfo","fetch","then","response","json","undefined","individualChampionAllyTips","allytips","allytip","individualChampionEnemyTips","enemytips","enemytip","individualChampionSkins","skins","Carousel","Item","src","num","alt","Caption","Modal","show","modalShow","onHide","handleClose","size","Title","Body","DifficultyScore","difficulty","difficultyScore","info","ChampionCard","setModalShow","Card","style","width","Img","title","CardsArea","championCards","championListToShow","App","setGeneralChampionsInfo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2af8576a.chunk.js","sourcesContent":["export const AllTagLists = (props, name) => {\n  const allTanks = [];\n  const allFighters = [];\n  const allAssassins = [];\n  const allMarksman = [];\n  const allMage = [];\n  const allSupport = [];\n\n  for (const name in props.generalChampionsInfo.data) {\n    for (const tag of props.generalChampionsInfo.data[name].tags) {\n      if (tag === \"Tank\") {\n        allTanks.push(name);\n      }\n      if (tag === \"Fighter\") {\n        allFighters.push(name);\n      }\n      if (tag === \"Assassin\") {\n        allAssassins.push(name);\n      }\n      if (tag === \"Marksman\") {\n        allMarksman.push(name);\n      }\n      if (tag === \"Mage\") {\n        allMage.push(name);\n      }\n      if (tag === \"Support\") {\n        allSupport.push(name);\n      }\n    }\n  }\n\n  if (name === \"Tank\") {\n    return allTanks;\n  }\n  if (name === \"Fighter\") {\n    return allFighters;\n  }\n  if (name === \"Assassin\") {\n    return allAssassins;\n  }\n  if (name === \"Marksman\") {\n    return allMarksman;\n  }\n  if (name === \"Mage\") {\n    return allMage;\n  }\n  if (name === \"Support\") {\n    return allSupport;\n  }\n};\n","import React, { useState, useCallback, useEffect } from \"react\";\nimport Badge from \"react-bootstrap/Badge\";\nimport { AllTagLists } from \"./allTagLists\";\n\nlet initialState = {\n  all: true,\n  tank: false,\n  fighter: false,\n  assassin: false,\n  marksman: false,\n  mage: false,\n  support: false,\n};\n\nfunction HeaderTagGroup(props) {\n  const [badgeState, setBadgeState] = useState(initialState);\n\n  useEffect(() => {\n    if (props.searchInput === \"\") {\n    } else {\n      const newState = Object.assign({}, initialState);\n      newState.all = false;\n      newState.tank = false;\n      newState.fighter = false;\n      newState.assassin = false;\n      newState.marksman = false;\n      newState.mage = false;\n      newState.support = false;\n      setBadgeState(newState);\n    }\n  }, [setBadgeState, props]);\n\n  const handleClick = useCallback(\n    (name) => (event) => {\n      // Using the initial state here to reset all back to false\n      const newState = Object.assign({}, initialState);\n\n      // Find the one we clicked and set to true\n      switch (name) {\n        case \"All\":\n          newState.all = true;\n          props.setSearchInput(\"\");\n          props.setChampionListToShow(props.championNameList);\n          break;\n        case \"Tank\":\n          newState.tank = true;\n          newState.all = false;\n          props.setSearchInput(\"\");\n          props.setChampionListToShow(AllTagLists(props, name));\n          break;\n        case \"Fighter\":\n          newState.fighter = true;\n          newState.all = false;\n          props.setSearchInput(\"\");\n          props.setChampionListToShow(AllTagLists(props, name));\n          break;\n        case \"Assassin\":\n          newState.assassin = true;\n          newState.all = false;\n          props.setSearchInput(\"\");\n          props.setChampionListToShow(AllTagLists(props, name));\n          break;\n        case \"Marksman\":\n          newState.marksman = true;\n          newState.all = false;\n          props.setSearchInput(\"\");\n          props.setChampionListToShow(AllTagLists(props, name));\n          break;\n        case \"Mage\":\n          newState.mage = true;\n          newState.all = false;\n          props.setSearchInput(\"\");\n          props.setChampionListToShow(AllTagLists(props, name));\n          break;\n        case \"Support\":\n          newState.support = true;\n          newState.all = false;\n          props.setSearchInput(\"\");\n          props.setChampionListToShow(AllTagLists(props, name));\n\n          break;\n        default:\n          break;\n      }\n\n      //Update our state\n      setBadgeState(newState);\n    },\n    [setBadgeState, props]\n  );\n\n  return (\n    <>\n      <Badge\n        onClick={handleClick(\"All\")}\n        variant={badgeState.all ? \"info\" : \"secondary\"}\n        className=\"ChangeCursorToPointer\"\n      >\n        All Champions\n      </Badge>{\" \"}\n      <Badge\n        onClick={handleClick(\"Tank\")}\n        variant={badgeState.tank ? \"info\" : \"secondary\"}\n        className=\"ChangeCursorToPointer\"\n      >\n        Tank\n      </Badge>{\" \"}\n      <Badge\n        onClick={handleClick(\"Fighter\")}\n        variant={badgeState.fighter ? \"info\" : \"secondary\"}\n        className=\"ChangeCursorToPointer\"\n      >\n        Fighter\n      </Badge>{\" \"}\n      <Badge\n        onClick={handleClick(\"Assassin\")}\n        variant={badgeState.assassin ? \"info\" : \"secondary\"}\n        className=\"ChangeCursorToPointer\"\n      >\n        Assassin\n      </Badge>{\" \"}\n      <Badge\n        onClick={handleClick(\"Marksman\")}\n        variant={badgeState.marksman ? \"info\" : \"secondary\"}\n        className=\"ChangeCursorToPointer\"\n      >\n        Marksman\n      </Badge>{\" \"}\n      <Badge\n        onClick={handleClick(\"Mage\")}\n        variant={badgeState.mage ? \"info\" : \"secondary\"}\n        className=\"ChangeCursorToPointer\"\n      >\n        Mage\n      </Badge>{\" \"}\n      <Badge\n        onClick={handleClick(\"Support\")}\n        variant={badgeState.support ? \"info\" : \"secondary\"}\n        className=\"ChangeCursorToPointer\"\n      >\n        Support\n      </Badge>{\" \"}\n    </>\n  );\n}\n\nexport default HeaderTagGroup;\n","import React, { useState, useEffect } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport HeaderTagGroup from \"./headerTagGroup\";\n\nfunction Header(props) {\n  const [searchInput, setSearchInput] = useState(\"\");\n\n  const championNameList = Object.keys(props.generalChampionsInfo.data);\n\n  function handleChange(e) {\n    //Update our state\n    setSearchInput(e.target.value);\n  }\n\n  useEffect(() => {\n    const championNameList = Object.keys(props.generalChampionsInfo.data);\n    const championRealNames = championNameList.map(\n      (champion) => props.generalChampionsInfo.data[champion].name\n    );\n\n    //Same as championNameList but made in a different way\n    const championFakeNames = championNameList.map(\n      (champion) => props.generalChampionsInfo.data[champion].id\n    );\n\n    const searchInputList = [];\n    //Takes the input from (searchInput) and pushes it into a list\n    for (const name of championRealNames) {\n      //if empty push nothing\n      if (searchInput === \"\") {\n      } else if (\n        //name is converted to lower- and uppercase, respectively\n        //and checks if searchInput is included in name\n        name.includes(searchInput) ||\n        name.toLowerCase().includes(searchInput) ||\n        name.toUpperCase().includes(searchInput)\n      ) {\n        //push input (real name/s)\n        searchInputList.push(name);\n      }\n    }\n\n    const searchInputListFakeNames = [];\n\n    //Takes the resulting searchInputList[] that contains the champions' real name,\n    //and compares it to the fake names in championFakeNames and pushes the new result into searchInputListFakeNames[]\n    //so you get the right champion/s when you search\n    for (const name of searchInputList) {\n      for (const fakeName of championFakeNames) {\n        if (name === props.generalChampionsInfo.data[fakeName].name) {\n          searchInputListFakeNames.push(fakeName);\n        }\n      }\n    }\n\n    const setChampionListToShow = props.setChampionListToShow;\n\n    if (searchInput === \"\") {\n      setChampionListToShow(championNameList);\n    } else {\n      setChampionListToShow(searchInputListFakeNames);\n    }\n  }, [\n    searchInput,\n    props.setChampionListToShow,\n    props.generalChampionsInfo.data,\n  ]);\n\n  return (\n    <>\n      <div className=\"grid-header headerbg\">\n        <div className=\"grid-header-badge-group\">\n          <HeaderTagGroup\n            generalChampionsInfo={props.generalChampionsInfo}\n            championNameList={championNameList}\n            setChampionListToShow={props.setChampionListToShow}\n            searchInput={searchInput}\n            setSearchInput={setSearchInput}\n          />\n        </div>\n        <div className=\"grid-header-searchbar\">\n          <Form>\n            <Form.Group controlId=\"searchChampionName\">\n              <Form.Control\n                //autocomplete=\"off\" turns off input history\n                autoComplete=\"off\"\n                onChange={handleChange}\n                type=\"search\"\n                placeholder=\"Enter champion name\"\n                className=\"searchbarLength searchbarAlignment\"\n                value={searchInput}\n              />\n            </Form.Group>\n          </Form>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction Spacer() {\n  const space = \" \";\n  return <>{space}</>;\n}\n\nexport default Spacer;\n","import React from \"react\";\nimport Badge from \"react-bootstrap/Badge\";\nimport Spacer from \"./spacer\";\n\n//Loopa alla taggs för aktuell champ\n\nfunction TagGroup(props) {\n  const championTagBadges = props.generalChampionsInfo.data[\n    props.champion\n  ].tags.map((tag) => (\n    <span key={tag}>\n      <Badge variant=\"secondary\">{tag}</Badge> <Spacer />{\" \"}\n    </span>\n  ));\n\n  return <>{championTagBadges}</>;\n}\n\nexport default TagGroup;\n","import React from \"react\";\n\nfunction SkinName(props) {\n  let defaultSkinName = \"\";\n\n  if (props.skin.name === \"default\") {\n    defaultSkinName = \"Normal skin\";\n  } else {\n    defaultSkinName = props.skin.name;\n  }\n\n  return <>{defaultSkinName}</>;\n}\n\nexport default SkinName;\n","import React from \"react\";\n\nfunction Lore(props) {\n  let defaultSkinLore = \"\";\n\n  if (props.skin.name === \"default\") {\n    defaultSkinLore = props.lore;\n  } else {\n    defaultSkinLore = \"\";\n  }\n\n  return <>{defaultSkinLore}</>;\n}\n\nexport default Lore;\n","import React, { useState, useEffect } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Carousel from \"react-bootstrap/Carousel\";\nimport TagGroup from \"./tagGroup\";\nimport SkinName from \"./skinName\";\nimport Lore from \"./lore\";\n\nfunction ChampionModal(props) {\n  const [individualChampionInfo, setIndividualChampionInfo] = useState();\n  const individualChampionAddressPrefix =\n    \"http://ddragon.leagueoflegends.com/cdn/10.16.1/data/en_US/champion/\";\n  const individualChampionAddressSuffix = \".json\";\n\n  //fetching part\n  useEffect(() => {\n    fetch(\n      `${individualChampionAddressPrefix}${props.champion}${individualChampionAddressSuffix}`\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        setIndividualChampionInfo(data);\n      });\n  }, [props.champion]);\n\n  //fetching part end\n\n  if (individualChampionInfo === undefined) {\n    return null;\n  }\n\n  const individualChampionAllyTips = individualChampionInfo.data[\n    props.champion\n  ].allytips.map((allytip) => <li key={allytip}>{allytip}</li>);\n\n  const individualChampionEnemyTips = individualChampionInfo.data[\n    props.champion\n  ].enemytips.map((enemytip) => <li key={enemytip}>{enemytip}</li>);\n\n  //Skin splash\n\n  const champSplashAddressPrefix =\n    \"http://ddragon.leagueoflegends.com/cdn/img/champion/splash/\";\n  const champSplashAddressUnderscore = \"_\";\n  const champSplashAddressSuffix = \".jpg\";\n\n  const individualChampionSkins = individualChampionInfo.data[\n    props.champion\n  ].skins.map((skin) => (\n    <Carousel.Item key={skin.id}>\n      <img\n        className=\"d-block w-100\"\n        src={`${champSplashAddressPrefix}${props.champion}${champSplashAddressUnderscore}${skin.num}${champSplashAddressSuffix}`}\n        alt=\"First slide\"\n      />\n      <Carousel.Caption>\n        <h3 className=\"splashTextAlpha\">\n          <SkinName skin={skin} />\n        </h3>\n        <div className=\"lore splashTextAlpha\">\n          <Lore\n            skin={skin}\n            lore={individualChampionInfo.data[props.champion].lore}\n          />\n        </div>\n      </Carousel.Caption>\n    </Carousel.Item>\n  ));\n\n  return (\n    <>\n      <Modal show={props.modalShow} onHide={props.handleClose} size=\"lg\">\n        <Modal.Header>\n          <Modal.Title>\n            <Carousel>{individualChampionSkins}</Carousel>\n          </Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <div className=\"grid-card-title\">\n            <div className=\"cardChampionName\">\n              {props.generalChampionsInfo.data[props.champion].name}{\" \"}\n            </div>\n            <div className=\"cardChampionTagGroup\">\n              <TagGroup\n                generalChampionsInfo={props.generalChampionsInfo}\n                champion={props.champion}\n              />\n            </div>\n          </div>\n          <br />\n          Ally tips:\n          <ol>{individualChampionAllyTips}</ol>\n          Enemy tips:\n          <ol>{individualChampionEnemyTips}</ol>\n        </Modal.Body>\n      </Modal>\n    </>\n  );\n}\n\nexport default ChampionModal;\n","import React from \"react\";\n\nfunction DifficultyScore(props) {\n  //display difficulty with the text; easy 1-3, average 4-6, hard 7-8, severe 9-10\n  let difficulty = \"\";\n  const difficultyScore =\n    props.generalChampionsInfo.data[props.champion].info.difficulty;\n\n  if (difficultyScore < 4) {\n    difficulty = \"Easy\";\n  }\n  if (difficultyScore > 3 && difficultyScore < 7) {\n    difficulty = \"Average\";\n  }\n  if (difficultyScore > 6 && difficultyScore < 9) {\n    difficulty = \"Hard\";\n  }\n  if (difficultyScore > 8) {\n    difficulty = \"Severe\";\n  }\n\n  return <>{difficulty}</>;\n}\n\nexport default DifficultyScore;\n","import React, { useState } from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport ChampionModal from \"./championModal\";\nimport TagGroup from \"./tagGroup\";\nimport DifficultyScore from \"./difficultyScore\";\n\nfunction ChampionCard(props) {\n  const [modalShow, setModalShow] = useState(false);\n  const handleClose = () => setModalShow(false);\n\n  const champSplashAddressPrefix =\n    \"http://ddragon.leagueoflegends.com/cdn/img/champion/splash/\";\n  const champSplashAddressSuffix = \"_0.jpg\";\n\n  return (\n    <>\n      <Card\n        className=\"ChangeCursorToPointer\"\n        style={{ width: \"18rem\" }}\n        onClick={() => setModalShow(true)}\n      >\n        <Card.Img\n          variant=\"top\"\n          src={`${champSplashAddressPrefix}${props.champion}${champSplashAddressSuffix}`}\n        />\n        <Card.Body>\n          <div className=\"grid-card-title\">\n            <div className=\"cardChampionName\">\n              {props.generalChampionsInfo.data[props.champion].name}{\" \"}\n            </div>\n            <div className=\"cardChampionTagGroup\">\n              <TagGroup\n                generalChampionsInfo={props.generalChampionsInfo}\n                champion={props.champion}\n              />\n            </div>\n          </div>\n          <div className=\"cardSubTitle\">\n            {props.generalChampionsInfo.data[props.champion].title}\n          </div>\n          <div>\n            <DifficultyScore\n              generalChampionsInfo={props.generalChampionsInfo}\n              champion={props.champion}\n            />\n          </div>\n        </Card.Body>\n      </Card>\n\n      <ChampionModal\n        modalShow={modalShow}\n        handleClose={handleClose}\n        generalChampionsInfo={props.generalChampionsInfo}\n        champion={props.champion}\n      />\n    </>\n  );\n}\n\nexport default ChampionCard;\n","import React from \"react\";\nimport ChampionCard from \"./championCard\";\n\nfunction CardsArea(props) {\n  //championListToShow ska vara länken till de olika listorna till ex tagsen i filter med ex if-sats\n  const championCards = props.championListToShow.map((champion) => (\n    <div key={champion}>\n      <ChampionCard\n        generalChampionsInfo={props.generalChampionsInfo}\n        champion={champion}\n      />\n    </div>\n  ));\n\n  return (\n    <div className=\"grid-outerCardsContainer cardsArea\">{championCards}</div>\n  );\n}\n\nexport default CardsArea;\n","import React, { useState, useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./myCss/grid.css\";\nimport \"./myCss/styles.css\";\nimport Header from \"./myComponents/header\";\nimport CardsArea from \"./myComponents/cardsArea\";\n\nfunction App() {\n  const [generalChampionsInfo, setGeneralChampionsInfo] = useState();\n  const [championListToShow, setChampionListToShow] = useState([]);\n\n  //fetching part\n  useEffect(() => {\n    fetch(\n      `http://ddragon.leagueoflegends.com/cdn/10.16.1/data/en_US/champion.json`\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        setGeneralChampionsInfo(data);\n        const championNameList = Object.keys(data.data);\n        //championNameList innehåller alla champion names i en array\n        setChampionListToShow(championNameList);\n      });\n  }, []);\n  //fetching part end\n\n  if (generalChampionsInfo === undefined) {\n    return null;\n  }\n\n  return (\n    <div>\n      <Header\n        generalChampionsInfo={generalChampionsInfo}\n        setChampionListToShow={setChampionListToShow}\n      />\n      <CardsArea\n        generalChampionsInfo={generalChampionsInfo}\n        championListToShow={championListToShow}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}